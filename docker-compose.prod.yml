version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:13-alpine
    container_name: autoreportsystem_db_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-autoreportsystem}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - autoreportsystem_network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Redis Cache (Optional for future scaling)
  redis:
    image: redis:7-alpine
    container_name: autoreportsystem_redis
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - autoreportsystem_network
    profiles:
      - cache

  # AutoReportSystem Application
  app:
    build:
      context: .
      dockerfile: infra/Dockerfile.prod
    container_name: autoreportsystem_app_prod
    environment:
      - DB_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-autoreportsystem}
      - SMTP_ENV_KEY=${SMTP_ENV_KEY}
      - DEBUG=False
      - LOG_LEVEL=${LOG_LEVEL:-WARNING}
      - SESSION_TIMEOUT=${SESSION_TIMEOUT:-7200}
      - SECRET_KEY=${SECRET_KEY}
    ports:
      - "8501:8501"
    volumes:
      - ./logs:/home/app/app/logs
      - ./data:/home/app/app/data
      - ./backups:/home/app/app/backups
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - autoreportsystem_network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Load Balancer and Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: autoreportsystem_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./infra/ssl:/etc/nginx/ssl:ro
      - ./infra/nginx/logs:/var/log/nginx
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - autoreportsystem_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Backup Service
  backup:
    image: postgres:13-alpine
    container_name: autoreportsystem_backup
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-autoreportsystem}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    depends_on:
      - db
    networks:
      - autoreportsystem_network
    profiles:
      - backup
    command: ["sh", "-c", "while true; do sleep 86400; /backup.sh; done"]

volumes:
  postgres_data_prod:
    driver: local
  redis_data:
    driver: local

networks:
  autoreportsystem_network:
    driver: bridge